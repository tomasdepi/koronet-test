name: "Build Docker Image and Deploy to ECS"

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
  

env:
  IMAGE_NAME: "tomasdepi94/koronet"
  DEPLOY_TO_ECS: false

jobs:
  build-docker:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - uses: docker/build-push-action@v5
        id: docker-build
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:${{ github.ref_name }}

      - name: Output build data
        run: |
          echo "::notice:: Image: ${{ env.IMAGE_NAME }}@${{ steps.docker-build.outputs.digest }}"
          echo "::notice:: Digest: ${{ steps.docker-build.outputs.digest }}"
          echo "::notice:: Tag: ${{ github.ref_name }}"

  deploy_ecr:
    if: ${{ env.DEPLOY_TO_ECS }}
    runs-on: ubuntu-latest
    needs: build-docker
    name: Deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update ECS
        run: |
          aws ecs update-service \
            --cluster koronet \
            --service koronet \
            --force-new-deployment
